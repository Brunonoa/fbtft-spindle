#!/bin/sh

set -ex

. ./common

WORKDIR=work
OUTDIR=out

PREVIMG=../$OUTDIR/fbtft-stage2.$IMGFORMAT

move_image() {
  mkdir -p ../$OUTDIR
  mv -f $CURIMG ../$OUTDIR
}


install_kernel() {
  CURIMG=$(cat fbtft-img-name)-$1-firmware.img
  convert_image $PREVIMG $CURIMG
  dotask run_qemu $CURIMG
  dotask disable_starting_services

  ssh_in_to_qemu sh -e - <<EOC
mount -o noatime /dev/sdc /mnt/mnt
EOC

  ssh_in_to_qemu chroot /mnt sh -l -ex - <<EOC
cat <<EOF | sudo tee /etc/profile.d/rpi-update.sh
export REPO_URI=https://github.com/notro/rpi-firmware
export BRANCH=$1
EOF

sudo rm -rf /lib/modules/*
sudo BRANCH=$1 UPDATE_SELF=0 SKIP_BACKUP=1 WORK_PATH=/mnt REPO_URI=https://github.com/notro/rpi-firmware /usr/bin/rpi-update

# /boot/.firmware_revision and /root/.rpi-firmware/bootcode.bin is used to determine if a (rpi-)update is needed
sudo mkdir /root/.rpi-firmware && sudo touch /root/.rpi-firmware/bootcode.bin

sudo rm -rf /boot.bak /lib/modules.bak /mnt/.rpi-firmware

EOC

  dotask allow_starting_services
  dotask shutdown_qemu

  attach_image_to_nbd $CURIMG /dev/nbd0
  sudo mount $BOOT_DEV boot
  sudo mount $ROOT_DEV rootfs

  sudo mv rootfs/etc/ld.so.preload.disable rootfs/etc/ld.so.preload

  # /boot is not mounted in the VM, so move the files
  sudo cp -v rootfs/boot/* rootfs/boot/.firmware_revision boot/
  sudo rm -vf rootfs/boot/* rootfs/boot/.firmware_revision

  sudo umount $BOOT_DEV
  sudo umount $ROOT_DEV

  sudo zerofree -v /dev/nbd0p2

  detach_image_from_nbd /dev/nbd0

  move_image
}


cd $WORKDIR
sudo -v

install_kernel master
install_kernel builtin

CLEANED_UP=1
FINISHED_SUCCESSFULLY=1
printf "Completed script successfully\n"
